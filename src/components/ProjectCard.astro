---
import type { GitHubRepo } from '../utils/github'
import { Badge } from '@astrojs/starlight/components'
import { Icon } from 'astro-icon/components'
import GitHubStats from './GitHubStats.vue'

interface Props {
  repo?: GitHubRepo
  href?: string
  title: string
  description?: string
  isPreview?: boolean
}

function formatRepoName(name: string): string {
  return name
    .split('-')
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
}

const { href, title, description, repo, isPreview = false } = Astro.props
const formattedTitle = repo?.name ? formatRepoName(repo.name) : title

// Extract owner from repo URL if available
const owner = repo?.html_url ? new URL(repo.html_url).pathname.split('/')[1] : 'incluud'
---

{
  isPreview ? (
    <div class="project-card preview">
      <div class="project-card__content">
        <div class="project-card__inner">
          <h3>{title}</h3>
          <p>{description || <slot />}</p>
        </div>
      </div>
    </div>
  ) : (
    <a href={href} class="project-card">
      <div class="project-card__content">
        <div class="project-card__inner">
          <h3 lang="en">{formattedTitle}</h3>
          <div class="project-card__badges">
            <Badge variant="success" text="Free" />
            <Badge variant="default" text="Open Source" />
          </div>
          <p>{description || repo?.description}</p>
        </div>
        {repo && (
          <GitHubStats
            owner={owner}
            repo={repo.name}
            initialStars={repo.stargazers_count}
            initialForks={repo.forks_count}
            client:load
          />
        )}
      </div>
      <slot />
      <pixel-canvas data-gap="8" data-speed="35" data-colors="cyan, purple, orange" />
    </a>
  )
}

<script>
  import '../assets/scripts/pixel-canvas.js'
</script>

<style>
  .project-card {
    display: flex;
    position: relative;
    flex-direction: column;
    transition: all 0.2s ease;
    cursor: pointer;
    border-radius: 0.5rem;
    background: var(--sl-color-bg-nav);
    padding: 1.5rem;
    min-block-size: 250px;
    color: inherit;
    text-decoration: none;
    box-shadow: var(--sl-shadow-sm);
    overflow: clip;
  }

  .project-card:hover {
    transform: translateY(-0.5rem) rotate(1deg);
    box-shadow: var(--sl-shadow-md);
  }

  .project-card__content {
    position: relative;
    z-index: 10;
    display: flex;
    flex: 1;
    flex-direction: column;
    justify-content: space-between;
    align-items: flex-start;
  }

  .project-card h3 {
    margin: 0;
    font-weight: 600;
    font-size: var(--sl-text-h4);
    line-height: 1.4;
  }

  .project-card p {
    margin-block: 0.75rem 0;
    color: var(--sl-color-white);
    line-height: 1.5;
  }

  .project-card__badges {
    display: flex;
    gap: 0.5rem;
    margin-block-start: 0.75rem;
  }

  .preview {
    justify-content: center;
    cursor: default;
    opacity: 0.7;
  }

  .preview:hover {
    transform: none;
    box-shadow: var(--sl-shadow-sm);
  }

  :global(pixel-canvas) {
    position: absolute;
    opacity: 0;
    z-index: -1;
    transition: opacity 0.2s ease;
    inset: -1rem;
    inline-size: calc(100% + 2rem);
    block-size: calc(100% + 2rem);
    border-radius: inherit;
  }

  .project-card:where(:hover, :focus-within) :global(pixel-canvas) {
    opacity: 0.5;
  }

  .project-card__date {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-block-start: 0.75rem;
    color: var(--sl-color-gray-2);
    font-size: 0.9rem;
  }
</style>
